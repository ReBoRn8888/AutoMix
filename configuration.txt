train_batch_size = 128
test_batch_size = 100

if(methodType == 'bc'):
	normalize = ZeroMean
else:
	normalize = transforms.Normalize

################
#   IMAGENET   #
################
shape = (3, 224, 224)
lrDecayStep = [50, 75]
n_epochs = 90

transform_train = transforms.Compose([
	transforms.RandomResizedCrop(224),
	transforms.RandomHorizontalFlip(),
	transforms.ToTensor(),
	normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

transform_test = transforms.Compose([
	transforms.RandomResizedCrop(224),
	transforms.RandomHorizontalFlip(),
	transforms.ToTensor(),
	normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

################
#   CIFAR10    #
################
classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')
num_classes = len(classes)
shape = (3, 32, 32)
lrDecayStep = [150, 225]
n_epochs = 300

transform_train = transforms.Compose([
	transforms.RandomCrop(32, padding=4),
	transforms.RandomHorizontalFlip(),
	transforms.ToTensor(),
	normalize(mean=[0.4914, 0.4822, 0.4465], std=[0.2023, 0.1994, 0.2010]),
])

transform_test = transforms.Compose([
	transforms.ToTensor(),
	normalize(mean=[0.4914, 0.4822, 0.4465], std=[0.2023, 0.1994, 0.2010]),
])

optimizer = optim.SGD(net.parameters(), lr=0.1, momentum=0.9, weight_decay=5e-4)

################
#   CIFAR100   #
################
classes = ['{}'.format(i) for i in range(100)]
num_classes = len(classes)
shape = (3, 32, 32)
lrDecayStep = [150, 225]
n_epochs = 300

transform_train = transforms.Compose([
	transforms.RandomCrop(32, padding=4),
	transforms.RandomHorizontalFlip(),
	transforms.ToTensor(),
	normalize(mean=[0.4914, 0.4822, 0.4465], std=[0.2023, 0.1994, 0.2010]),
])

transform_test = transforms.Compose([
	transforms.ToTensor(),
	normalize(mean=[0.4914, 0.4822, 0.4465], std=[0.2023, 0.1994, 0.2010]),
])

optimizer = optim.SGD(net.parameters(), lr=0.1, momentum=0.9, weight_decay=5e-4)

################
#    MNIST     #
################
classes = ['{}'.format(i) for i in range(10)]
num_classes = len(classes)
shape = (1, 28, 28)
lrDecayStep = [50, 75]
n_epochs = 100

transform_train = transforms.Compose([
	transforms.RandomCrop(28, padding=4),
	transforms.ToTensor(),
	normalize(mean=[0.1307,], std=[0.3081,]),
])
transform_test = transforms.Compose([
	transforms.ToTensor(),
	normalize(mean=[0.1307,], std=[0.3081,]),
])

optimizer = optim.SGD(net.parameters(), lr=0.1, momentum=0.9, weight_decay=5e-4)

####################
#  FASHION-MNIST   #
####################
classes = ['{}'.format(i) for i in range(10)]
num_classes = len(classes)
shape = (1, 28, 28)
lrDecayStep = [50, 75]
n_epochs = 100

transform_train = transforms.Compose([
	transforms.RandomCrop(28, padding=4),
	transforms.RandomHorizontalFlip(),
	transforms.ToTensor(),
	normalize(mean=[0.2860,], std=[0.3530,]),
])
transform_test = transforms.Compose([
	transforms.ToTensor(),
	normalize(mean=[0.2860,], std=[0.3530,]),
])

optimizer = optim.SGD(net.parameters(), lr=0.1, momentum=0.9, weight_decay=5e-4)

################
#    GTSRB     #
################
classes = ['{}'.format(i) for i in range(43)]
num_classes = len(classes)
shape = (3, 28, 28)
lrDecayStep = [50, 75]
n_epochs = 100

transform_train = transforms.Compose([
	transforms.RandomCrop(28, padding=4),
	transforms.ToTensor(),
	normalize(mean=[0.3352, 0.3173, 0.3584], std=[0.2662, 0.2563, 0.2727]),
])
transform_test = transforms.Compose([
	transforms.ToTensor(),
	normalize(mean=[0.3352, 0.3173, 0.3584], std=[0.2662, 0.2563, 0.2727]),
])

optimizer = optim.SGD(net.parameters(), lr=0.1, momentum=0.9, weight_decay=5e-4)

